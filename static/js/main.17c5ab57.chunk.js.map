{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisual/SortingVisual.jsx","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getSelectionSortAnimations","auxillaryArray","N","idx","swap","selectionSort","firstIndex","secondIndex","temp","getBubbleSortAnimations","bubbleSort","SortingVisual","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","background","map","value","className","onClick","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17c5ab57.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n     \n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        \n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n\n      animations.push([i, i]);\n      animations.push([i, i]);\n\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n\n      animations.push([j, j]);\n      animations.push([j, j]);\n\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\nfunction selectionSort(auxiliaryArray, animations){\n    const N = auxiliaryArray.length;\n    for (let i = 0; i < N-1; i++) {\n        let smallest = auxiliaryArray[i];\n        let idx = i;\n        \n        \n        for(let j = i+1; j < N; j++){\n            //We push three elements onto the array because we need an extra spot to see whether we need to make a color change or not when showing the animation\n            animations.push([\"first\", j,  idx]);\n            animations.push([\"second\", j, idx]);\n            if(auxiliaryArray[j] < auxiliaryArray[idx]){\n                idx = j;\n            }\n        }\n        //switch the colors back after the comparisons are done \n        animations.push([\"dummy\", idx, auxiliaryArray[i]]);\n        animations.push([\"dummy\", i, auxiliaryArray[idx]]);\n        swap(auxiliaryArray, i, idx);\n\n        \n    }\n}\nfunction swap(auxiliaryArray, firstIndex, secondIndex) {\n    let temp = auxiliaryArray[firstIndex];\n    auxiliaryArray[firstIndex] = auxiliaryArray[secondIndex];\n    auxiliaryArray[secondIndex] = temp;\n}\n","//this function returns the animations for the array being sorted\nexport function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    \n    array = auxillaryArray;\n    return [animations, array];\n}\n//actual bubble sort function\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i -1; j++) {\n            //change color since these are the elements being compared\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                //color swap, then actually swap elements \n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                //color switch but no array swaps\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n//swap function \nfunction swap(auxiliaryArray, firstIndex, secondIndex) {\n    let temp = auxiliaryArray[firstIndex];\n    auxiliaryArray[firstIndex] = auxiliaryArray[secondIndex];\n    auxiliaryArray[secondIndex] = temp;\n}","import React from 'react';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\nimport './SortingVisual.css';\n\n\nvar SPEED = 1;\n\n\nconst NUMBER_OF_ARRAY_BARS = 350;\n\n\nconst ORANGE = 'orange';\n\n\nconst RED = 'red';\n\nexport default class SortingVisual extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 602));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? RED : ORANGE;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * SPEED);\n      }\n    }\n  }\n  bubbleSort() {\n    \n    const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange) {\n            const color = (i % 4 === 0) ? RED : ORANGE;\n            const [barOneIndex, barTwoIndex] = animations[i];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * SPEED);\n        }\n        else {\n            const [barIndex, newHeight] = animations[i];\n            if (barIndex === -1) {\n                continue;\n            }\n            const barStyle = arrayBars[barIndex].style;\n            setTimeout(() => {\n                barStyle.height = `${newHeight}px`;\n            },i * SPEED);  \n        }\n    }\n\n     \n}\n  \n  \n\n  selectionSort() {\n    const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const isColorChange = (animations[i][0] === \"first\") || (animations[i][0] === \"second\");\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange) {\n            const color = (animations[i][0] === \"first\") ? RED : ORANGE;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * SPEED);\n        }\n        else {\n            const [temp, barIndex, newHeight] = animations[i];\n            const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n            },i * SPEED);  \n        }\n    }\n \n  }\n\n  insertionSort() {\n    \n    const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const isColorChange = (animations[i][0] === \"first\") || (animations[i][0] === \"second\");\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange) {\n            const color = (animations[i][0] === \"first\") ? RED : ORANGE;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * SPEED);\n            \n          \n        }\n        else {\n            const [temp, barIndex, newHeight] = animations[i];\n            const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n            },i * SPEED);  \n        }\n        \n    }\n  }\n  render() {\n\n\n    const {array} = this.state;\n    const obj = {\n        background: \"#Black\"\n    };\n    \n    return (\n      <div style = {obj}>\n        \n        {array.map((value, idx) => (\n          <div\n            \n            className=\"array-bar\"\n            key={idx}\n            \n            style={{\n              backgroundColor: ORANGE,\n              height: `${value}px`,\n              \n            }}>\n                \n                \n            </div>\n        ))}\n        <div></div>\n        \n        <button onClick={() => this.resetArray()}>New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.selectionSort()}>Selection Sort</button>\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        \n       \n        </div>\n        \n      \n    );\n  }\n}\n\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n//<h1> HELLO </h1>\n/*\nStill trying to add some more features:\nHeapSort, QuickSort, and a slider to adjust the speed, and the size of the array\n*/","//This function gets the animations for the array being sorted\nexport function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxiliaryArray = array.slice();\n    insertionSort(auxiliaryArray, animations);\n    array = auxiliaryArray;\n    return [animations, array];\n}\nfunction insertionSort(auxiliaryArray, animations){\n    const N = auxiliaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxiliaryArray[i];\n        let j = i-1;\n        animations.push([i,  i]);\n        animations.push([i, i]);\n\n        while(j >= 0 && key < auxiliaryArray[j]){\n            animations.push([\"dummy\", j+1,  auxiliaryArray[j]]);\n            auxiliaryArray[j + 1] = auxiliaryArray[j];\n            j = j-1;\n            if(j >= 0){\n                animations.push([\"first\", j, i]);\n                animations.push([\"second\", j, i]);\n            }\n        }\n        animations.push([\"dummy\", j + 1, key]);\n        auxiliaryArray[j + 1] = key;   \n    }\n}\nfunction swap(auxiliaryArray, firstInd, secondInd) {\n    let temp = auxiliaryArray[firstInd];\n    auxiliaryArray[firstInd] = auxiliaryArray[secondInd];\n    auxiliaryArray[secondInd] = temp;\n}\n\n","import React from 'react';\nimport SortingVisual from './SortingVisual/SortingVisual';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> SORTING VISUALIZER </h1>\n   \n      <SortingVisual></SortingVisual>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}